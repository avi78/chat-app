const Nb = 4; // Number of columns (32-bit words) in the state
const Nk = 4; // Number of 32-bit words in the key
const Nr = 10; // Number of rounds

// AES S-Box
const Sbox = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
];

// AES Inverse S-Box
const InvSbox = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
];

// AES Round Constants
const Rcon = [
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
];

// Key expansion function
function keyExpansion(key) {
    let w = new Array(Nb * (Nr + 1));
    let temp = [];

    for (let i = 0; i < Nk; i++) {
        w[i] = [key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3]];
    }

    for (let i = Nk; i < Nb * (Nr + 1); i++) {
        temp = [w[i - 1][0], w[i - 1][1], w[i - 1][2], w[i - 1][3]];

        if (i % Nk === 0) {
            temp = [Sbox[temp[1]], Sbox[temp[2]], Sbox[temp[3]], Sbox[temp[0]]];
            temp[0] ^= Rcon[i / Nk - 1];
        } else if (Nk > 6 && i % Nk === 4) {
            temp = [Sbox[temp[0]], Sbox[temp[1]], Sbox[temp[2]], Sbox[temp[3]]];
        }

        w[i] = [
            w[i - Nk][0] ^ temp[0],
            w[i - Nk][1] ^ temp[1],
            w[i - Nk][2] ^ temp[2],
            w[i - Nk][3] ^ temp[3]
        ];
    }

    return w;
}

// AES encryption function
function aesEncrypt(input) {
    let key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c];
    let plaintextBytes = stringToBytes(input);
    let paddedBytes = addPadding(plaintextBytes);

    let state = [[], [], [], []];

    // Copy input into state array
    for (let i = 0; i < 4 * Nb; i++) {
        state[i % 4][Math.floor(i / 4)] = paddedBytes[i];
    }

    let w = keyExpansion(key);

    // Add round key before starting rounds
    addRoundKey(state, w, 0);

    for (let round = 1; round < Nr; round++) {
        subBytes(state);
        shiftRows(state);
        mixColumns(state);
        addRoundKey(state, w, round);
    }

    subBytes(state);
    shiftRows(state);
    addRoundKey(state, w, Nr);

    // Copy state to output array
    let output = new Array(4 * Nb);
    for (let i = 0; i < 4 * Nb; i++) {
        output[i] = state[i % 4][Math.floor(i / 4)];
    }
    output=bytesToHex(output)

    return output;
}

function aesDecrypt(input) {
    let state = [[], [], [], []];
    let key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c];

    // Convert input from hex string to bytes
    let inputBytes = hexToBytes(input);

    // Copy input into state array
    for (let i = 0; i < 4 * Nb; i++) {
        state[i % 4][Math.floor(i / 4)] = inputBytes[i];
    }

    let w = keyExpansion(key);

    addRoundKey(state, w, Nr);

    for (let round = Nr - 1; round >= 1; round--) {
        invShiftRows(state);
        invSubBytes(state);
        addRoundKey(state, w, round);
        invMixColumns(state);
    }

    invShiftRows(state);
    invSubBytes(state);
    addRoundKey(state, w, 0);

    // Copy state to output array
    let output = new Array(4 * Nb);
    for (let i = 0; i < 4 * Nb; i++) {
        output[i] = state[i % 4][Math.floor(i / 4)];
    }

    // Remove padding and convert bytes to string
    let decryptedBytes = removePadding(output);
    let decryptedPlaintext = bytesToString(decryptedBytes);

    return decryptedPlaintext;
}

// Helper function to convert hexadecimal string to bytes
function hexToBytes(hex) {
    let bytes = [];
    for (let i = 0; i < hex.length; i += 2) {
        bytes.push(parseInt(hex.substr(i, 2), 16));
    }
    return bytes;
}

// Helper functions for AES rounds
function subBytes(state) {
    for (let i = 0; i < 4; i++) {
        for (let j = 0; j < Nb; j++) {
            state[i][j] = Sbox[state[i][j]];
        }
    }
}

function shiftRows(state) {
    let temp = [];
    for (let i = 1; i < 4; i++) {
        for (let j = 0; j < i; j++) {
            temp = state[i].shift();
            state[i].push(temp);
        }
    }
}

function mixColumns(state) {
    let temp = [];
    for (let i = 0; i < Nb; i++) {
        temp[0] = gmul(0x02, state[0][i]) ^ gmul(0x03, state[1][i]) ^ state[2][i] ^ state[3][i];
        temp[1] = state[0][i] ^ gmul(0x02, state[1][i]) ^ gmul(0x03, state[2][i]) ^ state[3][i];
        temp[2] = state[0][i] ^ state[1][i] ^ gmul(0x02, state[2][i]) ^ gmul(0x03, state[3][i]);
        temp[3] = gmul(0x03, state[0][i]) ^ state[1][i] ^ state[2][i] ^ gmul(0x02, state[3][i]);
        state[0][i] = temp[0];
        state[1][i] = temp[1];
        state[2][i] = temp[2];
        state[3][i] = temp[3];
    }
}

function invSubBytes(state) {
    for (let i = 0; i < 4; i++) {
        for (let j = 0; j < Nb; j++) {
            state[i][j] = InvSbox[state[i][j]];
        }
    }
}

function invShiftRows(state) {
    let temp = [];
    for (let i = 1; i < 4; i++) {
        for (let j = 0; j < i; j++) {
            temp = state[i].pop();
            state[i].unshift(temp);
        }
    }
}

function invMixColumns(state) {
    let temp = [];
    for (let i = 0; i < Nb; i++) {
        temp[0] = gmul(0x0e, state[0][i]) ^ gmul(0x0b, state[1][i]) ^ gmul(0x0d, state[2][i]) ^ gmul(0x09, state[3][i]);
        temp[1] = gmul(0x09, state[0][i]) ^ gmul(0x0e, state[1][i]) ^ gmul(0x0b, state[2][i]) ^ gmul(0x0d, state[3][i]);
        temp[2] = gmul(0x0d, state[0][i]) ^ gmul(0x09, state[1][i]) ^ gmul(0x0e, state[2][i]) ^ gmul(0x0b, state[3][i]);
        temp[3] = gmul(0x0b, state[0][i]) ^ gmul(0x0d, state[1][i]) ^ gmul(0x09, state[2][i]) ^ gmul(0x0e, state[3][i]);
        state[0][i] = temp[0];
        state[1][i] = temp[1];
        state[2][i] = temp[2];
        state[3][i] = temp[3];
    }
}

function addRoundKey(state, w, round) {
    for (let i = 0; i < 4; i++) {
        for (let j = 0; j < Nb; j++) {
            state[i][j] ^= w[round * Nb + j][i];
        }
    }
}

function gmul(a, b) {
    let p = 0;
    for (let i = 0; i < 8; i++) {
        if (b & 1) {
            p ^= a;
        }
        let hi_bit_set = a & 0x80;
        a <<= 1;
        if (hi_bit_set) {
            a ^= 0x1b; /* x^8 + x^4 + x^3 + x + 1 */
        }
        b >>= 1;
    }
    return p & 0xff;
}

// Padding function (PKCS#7)
function addPadding(input) {
    let paddingLength = 16 - (input.length % 16);
    let paddingByte = paddingLength.toString(16).padStart(2, '0');
    for (let i = 0; i < paddingLength; i++) {
        input.push(parseInt(paddingByte, 16));
    }
    return input;
}

// Remove padding function (PKCS#7)
function removePadding(input) {
    let paddingLength = input[input.length - 1];
    return input.slice(0, input.length - paddingLength);
}

// Convert string to bytes (UTF-8 encoding)
function stringToBytes(str) {
    if (typeof str !== 'string') {
        throw new TypeError('Expected input to be a string');
    }

    let bytes = [];
    for (let i = 0; i < str.length; i++) {
        bytes.push(str.charCodeAt(i));
    }
    return bytes;
}

// Convert bytes to string (UTF-8 decoding)
function bytesToString(bytes) {
    let str = '';
    for (let i = 0; i < bytes.length; i++) {
        str += String.fromCharCode(bytes[i]);
    }
    return str;
}

// Convert bytes to hexadecimal string
function bytesToHex(bytes) {
    let hex = '';
    for (let i = 0; i < bytes.length; i++) {
        let byteStr = bytes[i].toString(16).padStart(2, '0');
        hex += byteStr;
    }
    return hex;
}

// Example usage
// let plaintext = "Hello, AES!";
let key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c];
// let ciphertextBytes = aesEncrypt(plaintext, key);
// let ciphertextHex = bytesToHex(ciphertextBytes);
// console.log("Ciphertext (hex):", ciphertextHex);

// let decryptedBytes = aesDecrypt(ciphertextBytes, key);
// let decryptedPlaintext = bytesToString(removePadding(decryptedBytes));
// console.log("Decrypted plaintext:", decryptedPlaintext);
export { aesEncrypt, aesDecrypt };